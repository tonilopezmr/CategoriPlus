/*
 * Copyright 2014 Antonio López Marín.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package categoriplus.vista.paneles;

import categoriplus.vista.LoginDialog;
import categoriplus.vista.validators.StringValidator;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import javax.swing.JComponent;
import javax.swing.JTextField;

/**
 * Panel que utiliza {@link LoginDialog} para validar usuarios y contraseñas, 
 * asi como la conexion y nombre de base de datos.
 * 
 * A pesar de utilizar Simple Validation API, se comprueba si los campos son
 * correctos para poner enable o disable el boton de Probar conexion, y 
 * trabaja conjuntamente con Simple Validation API.
 * 
 * Implementa de Objserver porque utiliza el patron Observer.
 * 
 * @author Antonio López Marín
 */
public class PanelLogin extends javax.swing.JPanel implements Formulario {

    //Vista contenedora donde estara el panel
    LoginDialog vista;

    /**
     * Creates new form Login
     * @param vista
     */
    public PanelLogin(LoginDialog vista) {
        initComponents();
        configComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        hostField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        nomDBField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        usuarioField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        passField = new javax.swing.JPasswordField();
        comprobarBtn = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("lang/lenguajes"); // NOI18N
        jLabel1.setText(bundle.getString("base_datos")); // NOI18N

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel2.setText(bundle.getString("host")); // NOI18N
        jLabel2.setToolTipText("Direccion de localizacion de la base de datos de la cual se va a conectar.\n");

        hostField.setText(bundle.getString("LOCALHOST")); // NOI18N
        hostField.setName("host"); // NOI18N
        hostField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostFieldActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel3.setText(bundle.getString("base_datos")); // NOI18N
        jLabel3.setToolTipText(bundle.getString("nom_db_tooltip")); // NOI18N

        nomDBField.setText(bundle.getString("ejemplo")); // NOI18N
        nomDBField.setName("base de datos"); // NOI18N
        nomDBField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomDBFieldActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel4.setText(bundle.getString("susuario_login")); // NOI18N
        jLabel4.setToolTipText(bundle.getString("usuario_db_tooltip")); // NOI18N

        usuarioField.setText(bundle.getString("ADMIN")); // NOI18N
        usuarioField.setName("usuario"); // NOI18N
        usuarioField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuarioFieldActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel5.setText(bundle.getString("pass_login")); // NOI18N
        jLabel5.setToolTipText(bundle.getString("pass_db_tooltip")); // NOI18N

        passField.setName("contraseña"); // NOI18N
        passField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passFieldActionPerformed(evt);
            }
        });

        comprobarBtn.setText(bundle.getString("comprobar_conexion")); // NOI18N
        comprobarBtn.setToolTipText(bundle.getString("btn_comprobar_tooltip")); // NOI18N
        comprobarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprobarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addComponent(nomDBField, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                            .addComponent(hostField, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                            .addComponent(usuarioField, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                            .addComponent(passField)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(comprobarBtn)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(hostField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nomDBField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(usuarioField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(comprobarBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void hostFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hostFieldActionPerformed

    private void nomDBFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomDBFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomDBFieldActionPerformed

    private void usuarioFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuarioFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usuarioFieldActionPerformed

    private void passFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passFieldActionPerformed

    private void comprobarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprobarBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comprobarBtnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton comprobarBtn;
    private javax.swing.JTextField hostField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField nomDBField;
    private javax.swing.JPasswordField passField;
    private javax.swing.JTextField usuarioField;
    // End of variables declaration//GEN-END:variables
    //Booleans
    boolean isValidNom = true;
    boolean isValidUser = true;
    boolean isValidHost = true;
    boolean isValidPass = false;
    //Metodos estaticos de si es correcto o incorrecto
    final public static String CORRECTO = "correct";
    final public static String INCORRECTO = "incorr";
    //JTextField "fantasma" solo para utilizar con Simple Validation API al desconocer
    //si se pueden validar botones, o comprobar conexiones, de esta forma
    //controlo junto con Simple Validation API que lo hace con TextFields y 
    //aparezcan sus mensajes en su libreria, con un validador que me defino a mano.
    private JTextField validarConexField;
    
    /**
     * Metodo que configura los componentes.
     */
    private void configComponents() {
        StringValidator validador = new StringValidator(this);
        hostField.addKeyListener(validador);
        nomDBField.addKeyListener(validador);
        passField.addKeyListener(validador);
        usuarioField.addKeyListener(validador);
        
        //Por defecto es false
        comprobarBtn.setEnabled(false);
        
        //Fiel que controlara el Validation API y segun su contenido
        //mostrara unos mensajes u otros
        validarConexField = new JTextField();
        
        //Focus listener de seguridad, por si validan todo y lo retocan
        FocusListener focurs = new FocusListener() {
            
            @Override
            public void focusGained(FocusEvent e) {
                //Si gana el foco cuando todo es correcto, quiere decir
                //que no han pulsado el boton de OK, y puede ser que 
                //hayan cambiado algo del login, por seguridad que compruebe
                //la conexion otra vez.
                if (validarConexField.getText().equals(CORRECTO)) {
                    //Empty para que diga que compruebe conexion
                    validarConexField.setText(""); 
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                
            }
        };
        
        //Añado el Listener para mayor seguridad
        hostField.addFocusListener(focurs);
        nomDBField.addFocusListener(focurs);
        passField.addFocusListener(focurs);
        usuarioField.addFocusListener(focurs);        
    }

    /**
     * Metodo que le añade un listener al boton de comprobar conexion.
     *
     * Dependiendo de que conexion tenga que comprobar.
     *
     * @param listener
     */
    public void addactionListener(ActionListener listener) {
        comprobarBtn.addActionListener(listener);
    }
    
    ///////////////////////////////////////
    ////////Getters and Setters ///////////
    ///////////////////////////////////////
    
    public String getHost() {
        return hostField.getText();
    }

    public String getNomDB() {
        return nomDBField.getText();
    }

    public char[] getPass() {
        return passField.getPassword();
    }

    public String getUsuario() {
        return usuarioField.getText();
    }

    public void setHost(String host) {
        this.hostField.setText(host);
    }

    public void setNomDB(String nomDB) {
        this.nomDBField.setText(nomDB);
    }

    public void setPass(String pass) {
        this.passField.setText(pass);
    }

    public void setUsuario(String user) {
        this.usuarioField.setText(user);
    }

    public JTextField getHostField() {
        return hostField;
    }

    public JTextField getNomDBField() {
        return nomDBField;
    }

    public JTextField getPassField() {
        return passField;
    }

    public JTextField getUsuarioField() {
        return usuarioField;
    }

    public JTextField getBtnConexion(){
        return validarConexField;
    }
    
    /**
     * Metodo notifyInfo que en este caso se utiliza para validar la conexion.
     * 
     * @param msg 
     */
    public void notifyInfo(String msg){
         validarConexField.setText(CORRECTO);
    }
    
    /**
     * Metodo que notifica un error.
     * 
     * @param msg 
     */
    @Override
    public void notifyError(String msg) {
        validarConexField.setText(INCORRECTO);
    }

    @Override
    public void initalFocus() {
        //Do nothing
    }

    @Override
    public void defaultButton() {
        //Do nothing
    }
    
    /**
     * Si es valido, digo que componente ha sido valido.
     * 
     * @param validComponent 
     */
    @Override
    public void valid(JComponent validComponent) {
        isValid(true, validComponent);
    }
    
    /**
     * Si es invalido digo que componente ha sido invalido.
     * 
     * @param invalidComponent 
     */
    @Override
    public void invalid(JComponent invalidComponent) {
        isValid(false, invalidComponent);
    }
    
    /**
     * Metodo que comprueba que componente es el correcto o incorrecto.
     * 
     * @param valid
     * @param validComponent Metodo
     */
    public void isValid(boolean valid, JComponent validComponent) {
        if (usuarioField.equals(validComponent)) {
            isValidUser = valid;
        } else if (passField.equals(validComponent)) {
            isValidPass = valid;
        } else if (nomDBField.equals(validComponent)) {
            isValidNom = valid;
        } else if (hostField.equals(validComponent)) {
            isValidHost = valid;
        }
        btonConexion();
    }
    
    /**
     * Metodo que pone enable o disabled el boton de comprobar conexion.
     */
    public void btonConexion(){
        if (isValidUser && isValidPass && isValidNom && isValidHost) {
            comprobarBtn.setEnabled(true);
        }else{
            comprobarBtn.setEnabled(false);
        }
    }
}