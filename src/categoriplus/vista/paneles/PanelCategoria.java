/*
 * Copyright 2014 Antonio López Marín.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package categoriplus.vista.paneles;

import categoriplus.controlador.Controlador;
import categoriplus.controlador.listeners.ButtonListener;
import categoriplus.modelo.Categoria;
import categoriplus.vista.Principal;
import categoriplus.vista.validators.StringValidator;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JComponent;

/**
 * Panel de Categoria, que puede crear o modificar una categoria.
 *
 * Implementa de Objserver porque utiliza el patron Observer.
 *
 * @author Antonio López Marín
 */
public class PanelCategoria extends javax.swing.JPanel implements Formulario, Observer {

    /**
     * Constructor para usar el panel para crear categorias.
     *
     * @param vista
     * @param controller
     * @throws java.lang.Exception
     */
    public PanelCategoria(Principal vista, Controlador controller) throws Exception {
        this.actionCode = PanelCategoria.CREAR;
        this.controller = controller;
        this.vista = vista;
        initComponents();
        configComponents();
        cargarCategoriasPadre();
    }

    /**
     * Consturctor para usar el panel para modificar un categorias.
     *
     * @param vista
     * @param controller
     * @param categoria
     * @param producto
     * @throws java.lang.Exception
     */
    public PanelCategoria(Principal vista, Controlador controller, Categoria categoria) throws Exception {
        this.controller = controller;
        this.vista = vista;
        this.actionCode = PanelCategoria.MODIFICAR;
        this.categoriaPanel = categoria;
        initComponents();
        configComponents();
        cargarCategoria(categoria);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tituloLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        categoriasPadre = new javax.swing.JComboBox<Categoria>();
        jLabel2 = new javax.swing.JLabel();
        nombreField = new javax.swing.JTextField();
        guardarBtn = new botonjavabeans.PuntoBoton();
        cancelarBtn = new botonjavabeans.PuntoBoton();
        errorLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(590, 339));
        setPreferredSize(new java.awt.Dimension(590, 339));

        tituloLabel.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        tituloLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("lang/lenguajes"); // NOI18N
        tituloLabel.setText(bundle.getString("CATEGORIA")); // NOI18N

        jLabel1.setLabelFor(categoriasPadre);
        jLabel1.setText(bundle.getString("categoria_padre")); // NOI18N
        jLabel1.setToolTipText(bundle.getString("categoria_padre_tooltip")); // NOI18N

        jLabel2.setLabelFor(nombreField);
        jLabel2.setText(bundle.getString("NOMBRE")); // NOI18N
        jLabel2.setToolTipText(bundle.getString("nombre_cat_tooltip")); // NOI18N

        nombreField.setName("nombre_cat"); // NOI18N
        nombreField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreFieldActionPerformed(evt);
            }
        });

        guardarBtn.setName("guardar"); // NOI18N
        guardarBtn.setText(bundle.getString("GUARDAR")); // NOI18N
        guardarBtn.setToolTipText(bundle.getString("btn_guarda_cat_tooltip")); // NOI18N
        guardarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBtnActionPerformed(evt);
            }
        });

        cancelarBtn.setName("cancelar"); // NOI18N
        cancelarBtn.setText(bundle.getString("CANCELAR")); // NOI18N
        cancelarBtn.setToolTipText(bundle.getString("btn_cancela_cat_tooltip")); // NOI18N
        cancelarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tituloLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(37, 37, 37)
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(nombreField, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(categoriasPadre, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(guardarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(cancelarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(tituloLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nombreField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(categoriasPadre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(errorLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(109, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nombreFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreFieldActionPerformed
    }//GEN-LAST:event_nombreFieldActionPerformed

    private void guardarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_guardarBtnActionPerformed

    private void cancelarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelarBtnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private botonjavabeans.PuntoBoton cancelarBtn;
    private javax.swing.JComboBox categoriasPadre;
    private javax.swing.JLabel errorLabel;
    private botonjavabeans.PuntoBoton guardarBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField nombreField;
    private javax.swing.JLabel tituloLabel;
    // End of variables declaration//GEN-END:variables
    //Constantes
    final public static String PANEL_NAME = java.util.ResourceBundle.getBundle("lang/lenguajes").getString("CATEGORIA");
    final public static int MODIFICAR = 100;        //Puede modificar
    final public static int CREAR = 123;            //Puede crear
    final private int NONE_CODE = -10;
    //Vista principal
    private final Principal vista;
    //Controlador
    private final Controlador controller;
    private int actionCode;
    //Codigo de la categoria a modificar
    private Categoria categoriaPanel;

    /**
     * Metodo de configuracion de componentes.
     */
    private void configComponents() {
        //Por defecto esta deshabilitado
        guardarBtn.setEnabled(false);

        //Validator de nombre
        StringValidator verifier = new StringValidator(this);
        nombreField.addFocusListener(verifier);
        nombreField.addKeyListener(verifier);

        //Creo el listner de guardar
        guardarBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (actionCode == CREAR) {
                        controller.crearCategoria(recogerDatosPanel());
                        limpiarPanel();
                        notifyInfo("Se creo correctamente.");
                    } else {
                        modificar();
                    }
                } catch (Exception ex) {
                    vista.mostrarError(java.util.ResourceBundle.getBundle("lang/lenguajes").getString("error_guardar"));
                    ex.printStackTrace();
                }
            }
        });

        //Listener que cierra los tab al puslar el boton
        ButtonListener btnListener = new ButtonListener(vista);

        //creo el listener de cancelar
        cancelarBtn.addActionListener(btnListener);
        cancelarBtn.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                limpiarPanel();
            }
        });
        guardarBtn.addActionListener(btnListener);

        //El foco esta en el nombre
        initalFocus();
    }

    private void modificar() throws Exception {
        Categoria categoria = recogerDatosPanel();
        categoria.setId(categoriaPanel.getId());
        if (!categoria.equals(this.categoriaPanel)) {
            controller.modificarCategoria(categoria);
            limpiarPanel();
            notifyInfo("Se modifico correctamente.");
        }
    }

    /**
     * Metodo qeu carga la categoria en el panel.
     *
     * @param cat
     */
    private void cargarCategoria(Categoria cat) throws Exception {
        nombreField.setText(cat.getName());
        cargarCategoriasPadre(cat);
        seleccionarCategoria(cat.getParent());
        guardarBtn.setEnabled(true);
    }

    /**
     * Metodo que recoge los datos del panel.
     *
     * @return
     */
    private Categoria recogerDatosPanel() {
        Categoria categoria = new Categoria();
        //Recoje el nombre
        categoria.setName(nombreField.getText());
        //Recoje la categoria padre
        Categoria parent = (Categoria) categoriasPadre.getSelectedItem();
        //Si la categoria padre es distinto de NONE (No tiene categoria padre)
        if (parent.getId() != NONE_CODE) {
            categoria.setParent(parent);
        } else {
            //Sino su categoria padre es nula
            categoria.setParent(null);
        }

        return categoria;
    }

    /**
     * Metodo que selecciona la categoria que se le pasa por parametros, si es
     * nula selecciona por defecto NONE.
     *
     * @param categoria
     */
    private void seleccionarCategoria(Categoria categoria) {
        if (categoria == null) {
            categoriasPadre.setSelectedIndex(0);
        } else {
            int count = categoriasPadre.getItemCount();
            for (int i = 0; i < count; i++) {
                Categoria cat = (Categoria) categoriasPadre.getItemAt(i);
                if (cat.getId()==categoria.getId()) {
                    categoriasPadre.setSelectedIndex(i);
                }
            }
//            categoriasPadre.setSelectedItem(categoria);
        }
    }

    /**
     * Metodo que carga todas las categorias, para seleccionarla como padre.
     *
     */
    private void cargarCategoriasPadre() throws Exception {
        //Primero quito todas las categorias y las vuelvo a llenar
        categoriasPadre.removeAllItems();
        //Recojo una lista de categorias
        List<Categoria> cats = controller.listarCategorias();

        //La primera categoria es NONE, osea que no hay categoria
        categoriasPadre.addItem(new Categoria(NONE_CODE, java.util.ResourceBundle.getBundle("lang/lenguajes").getString("NONE"), null));
        //Y relleno las categorias padre si hay
        for (Categoria categoria : cats) {
            categoriasPadre.addItem(categoria);
        }
    }

    /**
     * Metodo que carga las categorias padre, menos la categoria que se va a
     * modificar, no puede ser padre de si misma.
     *
     * @param categoria
     */
    private void cargarCategoriasPadre(Categoria categoria) throws Exception {
        //Primero quito todas las categorias y las vuelvo a llenar
        categoriasPadre.removeAllItems();
        //Recojo una lista de categorias
        List<Categoria> cats = controller.listarCategorias();

        //La primera categoria es NONE, osea que no hay categoria
        categoriasPadre.addItem(new Categoria(NONE_CODE, java.util.ResourceBundle.getBundle("lang/lenguajes").getString("NONE"), null));
        //Y relleno las categorias padre si hay
        for (Categoria category : cats) {
            if (categoria.getId() != category.getId()) {
                categoriasPadre.addItem(category);
            }
        }
    }

    /**
     * Compruebo si la categoria es padre o no y si puede ser padre, de la
     * categoria actual.
     *
     * @param childs
     * @param parent
     * @deprecated No lo utilizo ya que no haria bien la separacion de capas, y
     * podria complicarse porque tendria que ir consultando los padres de todas
     * las categorias etc, y no se pide.
     */
    private void cargarPadres(List<Categoria> childs, Categoria parent) {
        if (!childs.isEmpty()) {
            for (Categoria child : childs) {
                if (child.getId() != parent.getId()) {
                    categoriasPadre.addItem(parent);
                }
            }
        } else {
            categoriasPadre.addItem(parent);
        }
    }

    /**
     * Metodo que limpia el panel
     */
    public void limpiarPanel() {
        nombreField.requestFocus();
        nombreField.setText("");
        categoriasPadre.setSelectedIndex(0); //NONE   
        notifyError("");
        notifyInfo("");
    }

    /**
     * Metodo que se ejecuta si el modelo cambia.
     *
     * @param o
     * @param arg
     */
    @Override
    public void update(Observable o, Object arg) {
        try {
            if (actionCode == MODIFICAR) {
                Categoria cat = controller.getCategoria(categoriaPanel.getId());
                cargarCategoriasPadre(cat);
                seleccionarCategoria(cat.getParent());
            } else {
                cargarCategoriasPadre();
            }
        } catch (Exception ex) {
            vista.mostrarError(java.util.ResourceBundle.getBundle("lang/lenguajes").getString("error_cat_padres"));
            ex.printStackTrace();
        }
    }

    @Override
    public void notifyInfo(String msg) {
        vista.mostrarInformacion(msg);
    }

    /**
     * Metodo que pone en el panel un mensaje de error.
     *
     * @param msg
     */
    @Override
    public void notifyError(String msg) {
        errorLabel.setText("<html><font color=\"red\">" + msg + "</font></html>");
    }

    /**
     * Metodo que se debe iniciar al cargar el panel.
     *
     */
    @Override
    public void initalFocus() {
        nombreField.requestFocus();
    }

    /**
     * Metodo que pone el boton por defecto, tiene que ir alternandose, porque
     * en la misma vista puede haber varios en cada momento.
     *
     */
    @Override
    public void defaultButton() {
        //Boton por defecto el de guardar
        vista.getRootPane().setDefaultButton(guardarBtn);
    }

    /**
     * Si el formulario es valido pongo el boton guardar enable.
     *
     */
    @Override
    public void valid(JComponent valid) {
        guardarBtn.setEnabled(true);
        errorLabel.setText("");
    }

    /**
     * Metodo que se ejecuta si un componente del formualio es invalido
     *
     * @param invalid
     */
    @Override
    public void invalid(JComponent invalid) {
        nombreField.requestFocus();
        guardarBtn.setEnabled(false);
        notifyError(java.util.ResourceBundle.getBundle("lang/lenguajes").getString("nombre_invalido"));
    }
}
